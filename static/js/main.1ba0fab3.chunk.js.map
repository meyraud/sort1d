{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","n","quickSortHelper","low","high","part","pivot","temp","partition","treeHeap","largest","left","right","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","round","getHeapSortAnimations","v","getBubbleSortAnimations","className","map","value","idx","key","onClick","mergeSort","quickSort","heapSort","bubbleSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ba0fab3.chunk.js","sourcesContent":["\r\n  \r\nexport function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray,startIdx,endIdx,auxiliaryArray,animations) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {  \r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    \r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    \r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\nexport function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  let n=array.length;\r\n  if (n <= 1) return array;\r\n  quickSortHelper(array,0,n-1,animations);\r\n  return animations;\r\n}\r\n\r\nfunction quickSortHelper(mainArray,low,high,animations) {\r\n  if (low < high){\r\n    let part = partition(mainArray,low,high,animations);\r\n    if (low<part-1){\r\n      quickSortHelper(mainArray,low,part-1,animations);\r\n    }\r\n    if (part<high){\r\n      quickSortHelper(mainArray,part,high,animations);\r\n    }\r\n  }\r\n}\r\n\r\nfunction partition(mainArray,low,high,animations) {\r\n  let pivot = mainArray[Math.floor((high+low)/2)]; \r\n  let i = low;\r\n  let j = high;  \r\n     \r\n  while (i<=j){\r\n    while (mainArray[i] < pivot) {\r\n      animations.push([i,pivot]);\r\n      animations.push([i,pivot]);\r\n      animations.push([i, mainArray[i]]);\r\n      i++;\r\n    }\r\n    while (mainArray[j] > pivot) {\r\n      animations.push([j,pivot]);\r\n      animations.push([j,pivot]);\r\n      animations.push([j, mainArray[j]]);\r\n      j--;\r\n    }\r\n    if (i <= j) {\r\n      animations.push([i,j]);\r\n      animations.push([i,j]);\r\n      animations.push([i, mainArray[j]]);\r\n      animations.push([j,j]);\r\n      animations.push([j,j]);\r\n      animations.push([j, mainArray[i]]);\r\n      let temp=mainArray[i];\r\n      mainArray[i]=mainArray[j];\r\n      mainArray[j]=temp;\r\n      i++;\r\n      j--;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  for (let v=0;v<array.length-2;v++){\r\n    for (let i=0;i<array.length-1-v;i++){\r\n      animations.push([i,i+1]);\r\n      animations.push([i,i+1]);\r\n      if (array[i]>array[i+1]){\r\n        animations.push([i, array[i+1]]);\r\n\tanimations.push([i,i+1]);\r\n      \tanimations.push([i,i+1]);\r\n        animations.push([i+1,array[i]]);\r\n        let temp=array[i];\r\n        array[i]=array[i+1];\r\n        array[i+1]=temp;\r\n      } else {\r\n        animations.push([i, array[i]]);\r\n      }\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n\r\n\r\nexport function getHeapSortAnimations(array) {\r\n  const animations = [];\r\n  let n=array.length;\r\n  if (n <= 1) return array;\r\n\r\n  for (let i=Math.round(n/2)-1;i>=0;i--){\r\n    treeHeap(array, n, i,animations); \r\n  }  \r\n   // One by one extract an element from heap \r\n  for (let i=n-1;i>0; i--){\r\n    animations.push([0, i]);\r\n    animations.push([0, i]);\r\n    animations.push([0, array[i]]);\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([i,array[0]]);\r\n    let temp=array[i];\r\n    array[i]=array[0];\r\n    array[0]=temp;\r\n    treeHeap(array, i, 0,animations);  \r\n    } \r\n  \r\n  return animations;\r\n}\r\n\r\nfunction treeHeap(array,n,i,animations){\r\n  let largest=i;\r\n  let left=2*i+1;\r\n  let right=2*i+2;\r\n  \r\n  if (left<n && array[left]>array[largest]){\r\n    largest=left;\r\n  }\r\n  if (right<n && array[right]>array[largest]){\r\n    largest=right;\r\n  }\r\n\r\n  if (largest!==i){\r\n    animations.push([i, largest]);\r\n    animations.push([i, largest]);\r\n    animations.push([largest,array[i]]);\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([i,array[largest]]);\r\n    let temp=array[i];\r\n    array[i]=array[largest];\r\n    array[largest]=temp;\r\n    treeHeap(array,n,largest,animations);\r\n  } \r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport {getHeapSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport {getQuickSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 0.15;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 287;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'gray';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 230));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    const animations = getQuickSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  heapSort() {\r\n    const animations = getHeapSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n      <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n","import React from 'react';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer></SortingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render((\r\n  <Router basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </Router>\r\n), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}